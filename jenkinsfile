pipeline {
    agent any
    
    environment {
        DOCKERHUB_TOKEN = credentials('firs-pipe')
    }
    
    stages {
        stage('Checkout Git repository') {
            steps {
                echo 'Pulling'
                git branch: 'NADIA', url: 'https://github.com/ipactconsult/BNA_SmartFuture_Workshop_React_Web.git'
            }
        }
        
        stage('Install dependencies - Backend') {
            steps {
                dir('BNA-dashboard/backend') {
                    sh 'npm install'
                }
            }
        }
        
        stage('Test - Backend') {
            steps {
                dir('BNA-dashboard/backend') {
                    sh 'npm test'
                }
            }
        }
        
        stage('Build - Backend') {
            steps {
                dir('BNA-dashboard/backend') {
                    sh 'npm run build'
                }
            }
        }
        
        stage('Install dependencies - React') {
            steps {
                dir('BNA-dashboard/admin') {
                    sh 'npm install'
                }
            }
        }
        
        stage('Build - React') {
            steps {
                dir('BNA-dashboard/admin') {
                    sh 'npm run build'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def dockerImage = docker.build("aadmin", "-f BNA-dashboard/admin/Dockerfile .")
                }
            }
        }

        stage(' Push Docker Image to DockerHub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerpwd')]) {
                        sh '''
                        docker login -u nadianb -p "$dockerpwd"
                        docker tagaadmin:latest nadianb/aadmin:latest
                        docker push nadianb/aadmin:latest
                        '''
                    }
                }
            }
        }
        
        
      stage('Build Docker Image') {
            steps {
                script {
                    def dockerImage = docker.build("product_management", "-f BNA-dashboard/backend/Dockerfile .")
                }
            }
        }

        stage(' Push Docker Image to DockerHub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerpwd')]) {
                        sh '''
                        docker login -u nadianb -p "$dockerpwd"
                        docker tag product_management:latest nadianb/product_management:latest
                        docker push nadianb/product_management:latest
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build and tests completed successfully!'
        }
        failure {
            echo 'Build or tests failed.'
        }
    }
}