pipeline {
    agent any
    
    environment {
        registry = "your-dockerhub-username" // Remplacez par votre nom d'utilisateur Docker Hub
        dockerImageBackend = "your-dockerhub-username/product_management" // Image Docker pour le backend
        dockerImageReact = "your-dockerhub-username/admin" // Image Docker pour React
        dockerFileBackend = "BNA-dashboard/backend/Dockerfile" // Chemin vers Dockerfile du backend
        dockerFileReact = "BNA-dashboard/admin/Dockerfile" // Chemin vers Dockerfile de React
        dockerCred = credentials('firs-pipe') // ID des identifiants Docker Hub
    }
    
    stages {
        stage('Checkout Git repository') {
            steps {
                echo 'Pulling'
                git branch: 'NADIA', url: 'https://github.com/ipactconsult/BNA_SmartFuture_Workshop_React_Web.git'
            }
        }
        
        stage('Install dependencies - Backend') {
            steps {
                dir('BNA-dashboard/backend') {
                    sh 'npm install'
                }
            }
        }
        
        stage('Test - Backend') {
            steps {
                dir('BNA-dashboard/backend') {
                    sh 'npm test'
                }
            }
        }
        
        stage('Build - Backend') {
            steps {
                dir('BNA-dashboard/backend') {
                    sh 'npm run build'
                }
            }
        }
        
        stage('Install dependencies - React') {
            steps {
                dir('BNA-dashboard/admin') {
                    sh 'npm install'
                }
            }
        }
        
        stage('Build - React') {
            steps {
                dir('BNA-dashboard/admin') {
                    sh 'npm run build'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
        
        stage('Build and Push Docker Image - Backend') {
            steps {
                script {
                    // Construire l'image Docker pour le backend
                    docker.withRegistry('', dockerCred) {
                        def customImage = docker.build(dockerImageBackend, "-f ${dockerFileBackend} BNA-dashboard/backend")
                        customImage.push()
                    }
                }
            }
        }

        stage('Build and Push Docker Image - React') {
            steps {
                script {
                    // Construire l'image Docker pour React
                    docker.withRegistry('', dockerCred) {
                        def customImage = docker.build(dockerImageReact, "-f ${dockerFileReact} BNA-dashboard/admin")
                        customImage.push()
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build and tests completed successfully!'
        }
        failure {
            echo 'Build or tests failed.'
        }
    }
}
